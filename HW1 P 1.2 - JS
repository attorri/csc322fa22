const renderer = new THREE.WebGLRenderer();
renderer.setSize( window.innerWidth, window.innerHeight );
document.body.appendChild( renderer.domElement );

const camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 500 );
camera.position.set( 0, 0, 100 );
camera.lookAt( 0, 0, 0 );

const scene = new THREE.Scene();


const material = new THREE.LineBasicMaterial( { color: 0x00FF80 } );

const points = [];
points.push( new THREE.Vector3( 0, 0, 0 ) );
points.push( new THREE.Vector3(Math.sqrt(50), -1*Math.sqrt(50), -10 ) );
points.push( new THREE.Vector3(Math.sqrt(200), 0, 0 ) );
//points.push( new THREE.Vector3(0, 0, 0 ) );
points.push( new THREE.Vector3(0.5*Math.sqrt(200), 10, -5 ) );
points.push( new THREE.Vector3(0, 0, 0 ) ); 
//commenting line #20 gets rid of line between  
//right most point and starting point
points.push( new THREE.Vector3(Math.sqrt(200), 0, 0 ) );
points.push( new THREE.Vector3(Math.sqrt(50), -1*Math.sqrt(50), -10 ) );
points.push( new THREE.Vector3(0.5*Math.sqrt(200), 10, -5 ) );
points.push( new THREE.Vector3(0.5*Math.sqrt(200), 10, -5 ) );
points.push( new THREE.Vector3(0, 0, 0 ) );



const geometry = new THREE.BufferGeometry().setFromPoints( points );

const line = new THREE.Line( geometry, material );

scene.add( line );
renderer.render( scene, camera );

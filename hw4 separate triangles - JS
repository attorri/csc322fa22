function main() {
  const canvas = document.querySelector('#c');
  const renderer = new THREE.WebGLRenderer({canvas});

  const fov = 75;
  const aspect = 2;  // the canvas default
  const near = 0.1;
  var far = 100;
  var camera = new THREE.PerspectiveCamera(fov, aspect, near, far);
  camera.position.z = 5;

  const scene = new THREE.Scene();

  {
    const color = 0xFFFFFF;
    const intensity = 1;
    const light = new THREE.DirectionalLight(color, intensity);
    light.position.set(-1, 2, 4);
    scene.add(light);
  }

  const geometry = new THREE.Geometry();
  geometry.vertices.push(
  new THREE.Vector3(0, 0,  0),  // 0
  new THREE.Vector3(1, 0,  0),  // 1
  new THREE.Vector3(0,  1,  0),  // 2
  new THREE.Vector3( 1,  1,  0),  // 3
  new THREE.Vector3(0, 0, -1),  // 4
  new THREE.Vector3( 1, 0, -1),  // 5
  new THREE.Vector3(0,  1, -1),  // 6
  new THREE.Vector3( 1,  1, -1),  // 7
);

geometry.faces.push(


//front face
new THREE.Face3(0, 3, 2),
new THREE.Face3(0, 1, 3),
// back face
new THREE.Face3(5, 6, 7),
new THREE.Face3(5, 4, 6),

// left face
new THREE.Face3(4, 2, 6),
new THREE.Face3(4, 0, 2),
// right face
new THREE.Face3(1, 7, 3),
new THREE.Face3(1, 5, 7),

// top face
new THREE.Face3(2, 7, 6),
new THREE.Face3(2, 3, 7),
// bottom face
new THREE.Face3(4, 1, 0),
new THREE.Face3(4, 5, 1),

);



	var material = new THREE.MeshBasicMaterial({color: 0x800000});
	
  var cube = new THREE.Mesh(geometry,material);
	scene.add(cube);
	




  function resizeRendererToDisplaySize(renderer) {
    const canvas = renderer.domElement;
    const width = canvas.clientWidth;
    const height = canvas.clientHeight;
    const needResize = canvas.width !== width || canvas.height !== height;
    if (needResize) {
      renderer.setSize(width, height, false);
    }
    return needResize;
  }

  function render(time) {
    time *= 0.001;

    if (resizeRendererToDisplaySize(renderer)) {
      const canvas = renderer.domElement;
      camera.aspect = canvas.clientWidth / canvas.clientHeight;
      camera.updateProjectionMatrix();
    }
    
    
 
		cube.rotation.x += 0.02;
    cube.rotation.y += 0.02;
    //cube.rotation.z -= 0.02;
    renderer.render(scene, camera);

    requestAnimationFrame(render);
  }

  requestAnimationFrame(render);
}

main();
